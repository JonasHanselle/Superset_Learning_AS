buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		maven { url "http://clojars.org/repo/" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	//id 'org.openjfx.javafxplugin' version '0.0.5'
}
apply plugin: 'com.github.johnrengelman.shadow'

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

//javafx {
//    modules = [ 'javafx.controls', 'javafx.swing', 'javafx.web' ]
//}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
	   		srcDir 'src/example/java'
        }
        resources {
        	srcDir 'conf'
    	}
    }
	test {
	   	java {
	   		srcDir 'src/test/java'
	   	}
    }
}

//Java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {    
    // include ailibs for compilation
    compile ('ai.libs:jaicore-basic:0.2.4')
    compile ('commons-lang:commons-lang:2.6')
    compile ('mysql:mysql-connector-java:5.1.45')
    
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	runtimeOnly group: 'org.slf4j', name:'slf4j-log4j12', version:'1.7.25'
    
    // Use JUnit test framework
  	testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  	testCompile group: 'junit', name: 'junit-dep', version: '4.11'
  	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  	testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.+'
    testImplementation('junit:junit:4.11')
}

task mlplanCLI(type: Jar) {
    zip64 = true
    manifest {
		attributes 'Main-Class': 'ai.libs.mlplan.cli.MLPlanCLI'
    }
    destinationDir = file("${projectDir}/cli")
    archivesBaseName = 'mlplan-cli'
    archiveVersion = '0.2.3'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    from sourceSets.main.allSource
    from { configurations.compile.collect {
    		it.isDirectory() ? it : zipTree(it)
    	}
    }
    with jar
}




shadowJar {
    mergeServiceFiles()
}

jar {
    manifest {
        attributes(
            'Main-Class': "dagmlc.PipelineTester"
            //'Main-Class': "ai.libs.mlplan.experimenter.MLPlanExperimenter"
        )
    }
}

configurations {
}

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
	maven { url "http://clojars.org/repo/" }
	maven { url "https://plugins.gradle.org/m2/" }
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}
